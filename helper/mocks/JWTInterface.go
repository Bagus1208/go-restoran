// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// JWTInterface is an autogenerated mock type for the JWTInterface type
type JWTInterface struct {
	mock.Mock
}

// ExtractToken provides a mock function with given fields: tokenString
func (_m *JWTInterface) ExtractToken(tokenString string) (int, error) {
	ret := _m.Called(tokenString)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJWT provides a mock function with given fields: userID
func (_m *JWTInterface) GenerateJWT(userID string) map[string]interface{} {
	ret := _m.Called(userID)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GenerateTableToken provides a mock function with given fields: noTable, adminName
func (_m *JWTInterface) GenerateTableToken(noTable int, adminName string) string {
	ret := _m.Called(noTable, adminName)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, string) string); ok {
		r0 = rf(noTable, adminName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewJWTInterface creates a new instance of JWTInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTInterface {
	mock := &JWTInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "restoran/features/admin/model"

	mock "github.com/stretchr/testify/mock"
)

// AdminRepositoryInterface is an autogenerated mock type for the AdminRepositoryInterface type
type AdminRepositoryInterface struct {
	mock.Mock
}

// Insert provides a mock function with given fields: newData
func (_m *AdminRepositoryInterface) Insert(newData *model.Admin) (*model.Admin, error) {
	ret := _m.Called(newData)

	var r0 *model.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Admin) (*model.Admin, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*model.Admin) *model.Admin); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Admin) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email
func (_m *AdminRepositoryInterface) Login(email string) (*model.Admin, error) {
	ret := _m.Called(email)

	var r0 *model.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Admin, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Admin); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminRepositoryInterface creates a new instance of AdminRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminRepositoryInterface {
	mock := &AdminRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "restoran/features/admin/model"

	mock "github.com/stretchr/testify/mock"
)

// AdminServiceInterface is an autogenerated mock type for the AdminServiceInterface type
type AdminServiceInterface struct {
	mock.Mock
}

// Insert provides a mock function with given fields: newData
func (_m *AdminServiceInterface) Insert(newData model.AdminInput) (*model.AdminResponse, error) {
	ret := _m.Called(newData)

	var r0 *model.AdminResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AdminInput) (*model.AdminResponse, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(model.AdminInput) *model.AdminResponse); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AdminResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AdminInput) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *AdminServiceInterface) Login(email string, password string) (*model.UserCredential, error) {
	ret := _m.Called(email, password)

	var r0 *model.UserCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.UserCredential, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.UserCredential); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNoTable provides a mock function with given fields: noTable, email, password
func (_m *AdminServiceInterface) SetNoTable(noTable int, email string, password string) (string, error) {
	ret := _m.Called(noTable, email, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, string) (string, error)); ok {
		return rf(noTable, email, password)
	}
	if rf, ok := ret.Get(0).(func(int, string, string) string); ok {
		r0 = rf(noTable, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(noTable, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminServiceInterface creates a new instance of AdminServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminServiceInterface {
	mock := &AdminServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

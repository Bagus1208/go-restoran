// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "restoran/features/transaction/model"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepositoryInterface is an autogenerated mock type for the TransactionRepositoryInterface type
type TransactionRepositoryInterface struct {
	mock.Mock
}

// CheckTransaction provides a mock function with given fields: orderID
func (_m *TransactionRepositoryInterface) CheckTransaction(orderID string) (model.Status, error) {
	ret := _m.Called(orderID)

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Status, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) model.Status); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TransactionRepositoryInterface) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: pagination
func (_m *TransactionRepositoryInterface) GetAll(pagination model.QueryParam) ([]model.Transaction, error) {
	ret := _m.Called(pagination)

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(model.QueryParam) ([]model.Transaction, error)); ok {
		return rf(pagination)
	}
	if rf, ok := ret.Get(0).(func(model.QueryParam) []model.Transaction); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(model.QueryParam) error); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *TransactionRepositoryInterface) GetByID(id int) (*model.Transaction, error) {
	ret := _m.Called(id)

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Transaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderID provides a mock function with given fields: orderID
func (_m *TransactionRepositoryInterface) GetByOrderID(orderID string) (*model.Transaction, error) {
	ret := _m.Called(orderID)

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Transaction, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Transaction); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: id
func (_m *TransactionRepositoryInterface) GetOrder(id int) (*model.Order, error) {
	ret := _m.Called(id)

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *TransactionRepositoryInterface) Insert(newData *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(newData)

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Transaction) (*model.Transaction, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*model.Transaction) *model.Transaction); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Transaction) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapRequest provides a mock function with given fields: orderID, total
func (_m *TransactionRepositoryInterface) SnapRequest(orderID string, total int64) (string, string) {
	ret := _m.Called(orderID, total)

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func(string, int64) (string, string)); ok {
		return rf(orderID, total)
	}
	if rf, ok := ret.Get(0).(func(string, int64) string); ok {
		r0 = rf(orderID, total)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, int64) string); ok {
		r1 = rf(orderID, total)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// UpdateStatusOrder provides a mock function with given fields: id, status
func (_m *TransactionRepositoryInterface) UpdateStatusOrder(id uint, status string) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusTransaction provides a mock function with given fields: id, status
func (_m *TransactionRepositoryInterface) UpdateStatusTransaction(id uint, status model.Status) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, model.Status) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionRepositoryInterface creates a new instance of TransactionRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepositoryInterface {
	mock := &TransactionRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "restoran/features/transaction/model"

	mock "github.com/stretchr/testify/mock"
)

// TransactionServiceInterface is an autogenerated mock type for the TransactionServiceInterface type
type TransactionServiceInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *TransactionServiceInterface) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: pagination
func (_m *TransactionServiceInterface) GetAll(pagination model.QueryParam) ([]model.TransactionResponse, error) {
	ret := _m.Called(pagination)

	var r0 []model.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(model.QueryParam) ([]model.TransactionResponse, error)); ok {
		return rf(pagination)
	}
	if rf, ok := ret.Get(0).(func(model.QueryParam) []model.TransactionResponse); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(model.QueryParam) error); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *TransactionServiceInterface) GetByID(id int) (*model.TransactionResponse, error) {
	ret := _m.Called(id)

	var r0 *model.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.TransactionResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.TransactionResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *TransactionServiceInterface) Insert(newData model.TransactionInput) (*model.TransactionInputResponse, error) {
	ret := _m.Called(newData)

	var r0 *model.TransactionInputResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(model.TransactionInput) (*model.TransactionInputResponse, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(model.TransactionInput) *model.TransactionInputResponse); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TransactionInputResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(model.TransactionInput) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Notifications provides a mock function with given fields: notificationPayload
func (_m *TransactionServiceInterface) Notifications(notificationPayload map[string]interface{}) error {
	ret := _m.Called(notificationPayload)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(notificationPayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionServiceInterface creates a new instance of TransactionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionServiceInterface {
	mock := &TransactionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

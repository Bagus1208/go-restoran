// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "restoran/features/menu/model"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// MenuRepositoryInterface is an autogenerated mock type for the MenuRepositoryInterface type
type MenuRepositoryInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MenuRepositoryInterface) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: pagination
func (_m *MenuRepositoryInterface) GetAll(pagination model.QueryParam) ([]model.Menu, error) {
	ret := _m.Called(pagination)

	var r0 []model.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(model.QueryParam) ([]model.Menu, error)); ok {
		return rf(pagination)
	}
	if rf, ok := ret.Get(0).(func(model.QueryParam) []model.Menu); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(model.QueryParam) error); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMenuName provides a mock function with given fields:
func (_m *MenuRepositoryInterface) GetAllMenuName() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *MenuRepositoryInterface) GetByName(name string) *model.Menu {
	ret := _m.Called(name)

	var r0 *model.Menu
	if rf, ok := ret.Get(0).(func(string) *model.Menu); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Menu)
		}
	}

	return r0
}

// GetCategory provides a mock function with given fields: queryParam
func (_m *MenuRepositoryInterface) GetCategory(queryParam model.QueryParam) ([]model.Menu, error) {
	ret := _m.Called(queryParam)

	var r0 []model.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(model.QueryParam) ([]model.Menu, error)); ok {
		return rf(queryParam)
	}
	if rf, ok := ret.Get(0).(func(model.QueryParam) []model.Menu); ok {
		r0 = rf(queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(model.QueryParam) error); ok {
		r1 = rf(queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavorite provides a mock function with given fields:
func (_m *MenuRepositoryInterface) GetFavorite() ([]model.Favorite, error) {
	ret := _m.Called()

	var r0 []model.Favorite
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Favorite, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Favorite); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Favorite)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *MenuRepositoryInterface) Insert(newData *model.Menu) (*model.Menu, error) {
	ret := _m.Called(newData)

	var r0 *model.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Menu) (*model.Menu, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*model.Menu) *model.Menu); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Menu) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecommendationMenu provides a mock function with given fields: request
func (_m *MenuRepositoryInterface) RecommendationMenu(request model.RecommendationRequest) (string, error) {
	ret := _m.Called(request)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.RecommendationRequest) (string, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(model.RecommendationRequest) string); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.RecommendationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalData provides a mock function with given fields:
func (_m *MenuRepositoryInterface) TotalData() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalDataByCategory provides a mock function with given fields: category
func (_m *MenuRepositoryInterface) TotalDataByCategory(category string) (int64, error) {
	ret := _m.Called(category)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, updateData
func (_m *MenuRepositoryInterface) Update(id int, updateData *model.Menu) (*model.Menu, error) {
	ret := _m.Called(id, updateData)

	var r0 *model.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *model.Menu) (*model.Menu, error)); ok {
		return rf(id, updateData)
	}
	if rf, ok := ret.Get(0).(func(int, *model.Menu) *model.Menu); ok {
		r0 = rf(id, updateData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *model.Menu) error); ok {
		r1 = rf(id, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadImage provides a mock function with given fields: fileHeader, name
func (_m *MenuRepositoryInterface) UploadImage(fileHeader *multipart.FileHeader, name string) (string, error) {
	ret := _m.Called(fileHeader, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) (string, error)); ok {
		return rf(fileHeader, name)
	}
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) string); ok {
		r0 = rf(fileHeader, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*multipart.FileHeader, string) error); ok {
		r1 = rf(fileHeader, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMenuRepositoryInterface creates a new instance of MenuRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMenuRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MenuRepositoryInterface {
	mock := &MenuRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

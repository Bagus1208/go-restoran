// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "restoran/features/order/model"

	mock "github.com/stretchr/testify/mock"
)

// OrderRepositoryInterface is an autogenerated mock type for the OrderRepositoryInterface type
type OrderRepositoryInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *OrderRepositoryInterface) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMenu provides a mock function with given fields: menuID
func (_m *OrderRepositoryInterface) FindMenu(menuID []int) (bool, []int) {
	ret := _m.Called(menuID)

	var r0 bool
	var r1 []int
	if rf, ok := ret.Get(0).(func([]int) (bool, []int)); ok {
		return rf(menuID)
	}
	if rf, ok := ret.Get(0).(func([]int) bool); ok {
		r0 = rf(menuID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]int) []int); ok {
		r1 = rf(menuID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int)
		}
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: pagination
func (_m *OrderRepositoryInterface) GetAll(pagination model.Pagination) ([]model.Order, error) {
	ret := _m.Called(pagination)

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Pagination) ([]model.Order, error)); ok {
		return rf(pagination)
	}
	if rf, ok := ret.Get(0).(func(model.Pagination) []model.Order); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Pagination) error); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *OrderRepositoryInterface) GetByID(id int) (*model.Order, error) {
	ret := _m.Called(id)

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *OrderRepositoryInterface) Insert(newData *model.Order) (*model.Order, error) {
	ret := _m.Called(newData)

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Order) (*model.Order, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*model.Order) *model.Order); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Order) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderRepositoryInterface creates a new instance of OrderRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepositoryInterface {
	mock := &OrderRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
